include "mem.mvl"
include "str.mvl"
include "unix.mvl"
include "math.mvl"

static FSTAT_BUF = 0
static FSTAT_BUF_ST_SIZE_PTR = 0

proc println str: s64
  @println 1 str

proc println fd: s64 str: s64
  @print fd str
  @printl fd "\n" 1

proc print str: s64
  @print 1 str

proc print fd: s64 str: s64
  len = @strlen str
  @printl fd str len

proc printl str: s64 len: s64
  @write 1 str len

proc printl fd: s64 str: s64 len: s64
  @write fd str len

proc input -> s64
  t = @input 0
  ret t

proc input fd: s64 -> s64
  buf_cap = 16
  buf_size = 0
  size_to_alloc = !add buf_cap 1
  buf = @malloc size_to_alloc

  while 1 == 1
    char = @inputc fd
    if char == -1
      break
    end
    if char == 10 # 10 = '\n'
      break
    end

    if buf_size >= buf_cap
      buf_cap = !mul buf_cap 2
      size_to_alloc = !add buf_cap 1
      buf = @realloc buf size_to_alloc
    end

    next_ptr = !add buf buf_size
    *next_ptr = char
    buf_size = !add buf_size 1
  end

  ret buf

proc inputc -> s64
  t = @inputc 0
  ret t

proc inputc fd: s64 -> s64
  char = 0

  ref = &char
  ref_s64 = cast s64 ref
  len = @inputl fd ref_s64 1

  if len == 1
    ret char
  end

  ret -1

proc inputl buf: s64 size: s64 -> s64
  len = @read 0 buf size
  ret len

proc inputl fd: s64 buf: s64 size: s64 -> s64
  len = @read fd buf size
  ret len

proc read_file path: s64 -> s64
  if FSTAT_BUF == 0
    FSTAT_BUF = @malloc 144
    FSTAT_BUF_ST_SIZE_PTR = !add FSTAT_BUF 48
  end

  fd = @openat AT_FDCWD path 0 0
  @fstat fd FSTAT_BUF

  size = *s64 FSTAT_BUF_ST_SIZE_PTR
  size_to_alloc = !add size 1
  content = @malloc size_to_alloc

  @read fd content size
  @close fd

  end_ptr = !add content size
  *end_ptr = 0

  ret content

proc write_file path: s64 buf: s64 buf_size: s64
  fd = @openat AT_FDCWD path 577 384
  @write fd buf buf_size
  @close fd
