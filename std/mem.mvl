include "str.mvl"

static PROT = 0
static FLAGS = 0
static FILDES = -1

init
  PROT = @or PROT_READ PROT_WRITE
  FLAGS = @or MAP_PRIVATE MAP_ANONYMOUS

proc malloc size: s64 -> s64
  size = @add size 8

  ptr = @mmap 0 size PROT FLAGS FILDES 0

  *ptr = size
  ptr = @add ptr 8
  ret ptr

proc realloc ptr: s64 size: s64 -> s64
  ptr = @sub ptr 8
  size = *s64 ptr

  new_ptr = @malloc size
  @memcopy new_ptr ptr size
  @free ptr
  ret new_ptr

proc free ptr: s64
  ptr = @sub ptr 8
  size = *s64 ptr
  @munmap ptr size

proc memcopy dest: s64 src: s64 size: s64
  i = 0
  byte = 0s8
  dest_ptr = dest
  src_ptr = src

 body:
  if i == size jump end
  byte = *s8 src_ptr
  *dest_ptr = byte

  dest_ptr = @add dest_ptr 1
  src_ptr = @add src_ptr 1
  i = @add i 1
  jump body
 end:

proc memmove dest: s64 src: s64 size: s64
  if dest < src jump next

  if size == 0 jump end

  i = @sub size 1
  dest_ptr = @add dest i
  src_ptr = @add src i

 body0:
  if i < 0 jump end
  byte = *u8 src_ptr
  *dest_ptr = byte

  i = @sub i 1
  dest_ptr = @sub dest_ptr 1
  src_ptr = @sub src_ptr 1
  jump body0

 next:

  i = 0
  dest_ptr = dest
  src_ptr = src

 body1:
  if i == size jump end
  byte = *u8 src_ptr
  *dest_ptr = byte

  dest_ptr = @add dest_ptr 1
  src_ptr = @add src_ptr 1
  i = @add i 1
  jump body1

 end:
