include "str.mvl"

proc malloc size: u64 -> u64
  size = @add size 8u64
  prot = @or PROT_READ PROT_WRITE
  flags = @or MAP_PRIVATE MAP_ANONYMOUS
  fildes = @neg 1u64

  ptr = @mmap 0u64 size prot flags fildes 0u64

  *ptr = size
  ptr = @add ptr 8u64
  ret ptr

proc realloc ptr: u64 size: u64 -> u64
  ptr = @sub ptr 8u64
  size = *u64 ptr

  new_ptr = @malloc size
  @memcopy new_ptr ptr size
  @free ptr
  ret new_ptr

proc free ptr: u64
  ptr = @sub ptr 8u64
  size = *u64 ptr
  @munmap ptr size

proc memcopy dest: u64 src: u64 size: u64
  i = 0u64
  byte = 0u8
  dest_ptr = dest
  src_ptr = src

 body:
  if i >= size jump end
  byte = *u8 src_ptr
  *dest_ptr = byte

  dest_ptr = @add dest_ptr 1u64
  src_ptr = @add src_ptr 1u64
  i = @add i 1u64
  jump body
 end:

proc memmove dest: u64 src: u64 size: u64
  if dest < src jump next

  i = @sub size 1u64
  dest_ptr = @add dest i
  src_ptr = @add src i

 body0:
  if i < 0u64 jump end
  byte = *u8 src_ptr
  *dest_ptr = byte

  i = @sub i 1u64
  dest_ptr = @sub dest_ptr 1u64
  src_ptr = @sub src_ptr 1u64
  jump body0

 next:

  i = 0u64
  dest_ptr = dest
  src_ptr = src

 body1:
  if i == size jump end
  byte = *u8 src_ptr
  *dest_ptr = byte

  dest_ptr = @add dest_ptr 1u64
  src_ptr = @add src_ptr 1u64
  i = @add i 1u64
  jump body1

 end:
