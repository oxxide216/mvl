static PROT_READ = 1u64
static PROT_WRITE = 2u64
static PROT_EXEC = 4u64
static PROT_NONE = 0u64

static MAP_SHARED = 1u64
static MAP_PRIVATE = 2u64
static MAP_ANONYMOUS = 32u64

static AT_FDCWD = -100u64

static O_RDONLY = 0u64
static O_WRONLY = 1u64
static O_RDWR = 2u64
static O_CREAT = 64u64
static O_TRUNC = 512u64

static S_IRWXU = 448u64
static S_IRUSR = 256u64
static S_IWUSR = 128u64
static S_IXUSR = 64u64

static S_IRWXG = 56u64
static S_IRGRP = 32u64
static S_IWGRP = 16u64
static S_IXGRP = 8u64

static S_IRWXO = 7u64
static S_IROTH = 4u64
static S_IWOTH = 2u64
static S_IXOTH = 1u64

proc exit code: u64
  asm "mov rax,60"
  asm "syscall"

proc write fd: u64 str: u64 len: u64
  asm "mov rax,1"
  asm "syscall"

proc read fd: u64 buf: u64 size: u64 -> u64
  asm "mov rax,0"
  asm noret "syscall"

proc mmap addr: u64 len: u64 prot: u64 flags: u64 fildes: u64 off: u64 -> u64
  asm "mov r10,rcx"
  asm "mov rax,9"
  asm noret "syscall"

proc munmap ptr: u64 size: u64
  asm "mov rax,11"
  asm "syscall"

proc openat dirfd: u64 pathname: u64 flags: u64 mode: u64 -> u64
  asm "mov r10,rcx"
  asm "mov rax,257"
  asm noret "syscall"

proc close fd: u64
  asm "mov rax,3"
  asm "syscall"

proc fstat fd: u64 buf: u64
  asm "mov rax,5"
  asm "syscall"
