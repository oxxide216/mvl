include "mem.mvl"

proc strlen str: s64 -> s64
  ptr = str

 body:
  char = @deref_str ptr
  if char == 0 jump next
  ptr = @add ptr 1
  jump body
 next:

  len = @sub ptr str
  ret len

proc s64_to_str num: s64 -> s64
  buf_size = 1
  size_to_alloc = @add buf_size 1
  buf = call malloc size_to_alloc
  len = 0

 body:
  if len < buf_size jump next
  buf_size = @mul buf_size 2
  size_to_alloc = @add buf_size 1
  call realloc buf size_to_alloc
 next:

  dest = @add buf 1
  call memmove dest buf len

  digit = @mod num 10
  digit = @add digit '0'
  @deref_put_str buf digit

  num = @div num 10
  len = @add len 1

  if num > 0 jump body

  ptr = @add buf len
  @deref_put_str ptr 0

  ret buf

proc str_to_s64 str: s64 -> s64
  num = 0
  i = 0

 body:
  ptr = @add str i
  char = @deref_str ptr
  if char == '\0' jump end
  if char < '0' jump next
  if char > '9' jump next

  ptr = @add str i
  digit = @sub char '0'

  num = @mul num 10
  num = @add num digit

 next:
  i = @add i 1

  jump body
 end:

  ret num
