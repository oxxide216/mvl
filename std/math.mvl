macro add a b -> r
  r = a
  asm "add @,@@" r b
end

macro sub a b -> r
  r = a
  asm "sub @,@@" r b
end

macro mul a b -> r
  r = a
  asm "mov rax,@" a
  asm "imul @@" b
  asm "mov @,rax" r
end

macro div a b -> r
  r = a
  asm "mov rax,@" a
  asm "cqo"
  asm "idiv @@" b
  asm "mov @,rax" r
end

macro mod a b -> r
  r = a
  asm "mov rax,@" a
  asm "cqo"
  asm "idiv @@" b
  asm "mov @,rdx" r
end

macro neg a -> r
  r = a
  asm "neg @" r
end

macro or a b -> r
  r = a
  asm "or @,@@" r b
end

macro and a b -> r
  r = a
  asm "and @,@@" r b
end

macro xor a b -> r
  r = a
  asm "xor @,@@" r b
end
