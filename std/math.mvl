proc add a: s64 b: s64 -> s64
  asm "add @,@" a b
  asm noret "mov rax,@" a

proc add a: s32 b: s32 -> s32
  asm "add @,@" a b
  asm noret "mov eax,@" a

proc add a: s16 b: s16 -> s16
  asm "add @,@" a b
  asm noret "mov ax,@" a

proc add a: s8 b: s8 -> s8
  asm "add @,@" a b
  asm noret "mov al,@" a

proc add a: u64 b: u64 -> u64
  asm "add @,@" a b
  asm noret "mov rax,@" a

proc add a: u32 b: u32 -> u32
  asm "add @,@" a b
  asm noret "mov eax,@" a

proc add a: u16 b: u16 -> u16
  asm "add @,@" a b
  asm noret "mov ax,@" a

proc add a: u8 b: u8 -> u8
  asm "add @,@" a b
  asm noret "mov al,@" a


proc sub a: s64 b: s64 -> s64
  asm "sub @,@" a b
  asm noret "mov rax,@" a

proc sub a: s32 b: s32 -> s32
  asm "sub @,@" a b
  asm noret "mov eax,@" a

proc sub a: s16 b: s16 -> s16
  asm "sub @,@" a b
  asm noret "mov ax,@" a

proc sub a: s8 b: s8 -> s8
  asm "sub @,@" a b
  asm noret "mov al,@" a

proc sub a: u64 b: u64 -> u64
  asm "sub @,@" a b
  asm noret "mov rax,@" a

proc sub a: u32 b: u32 -> u32
  asm "sub @,@" a b
  asm noret "mov eax,@" a

proc sub a: u16 b: u16 -> u16
  asm "sub @,@" a b
  asm noret " mov ax,@" a

proc sub a: u8 b: u8 -> u8
  asm "sub @,@" a b
  asm noret "mov al,@" a


proc mul a: s64 b: s64 -> s64
  asm "mov rax,@" a
  asm noret "imul @" b

proc mul a: s32 b: s32 -> s32
  asm "mov eax,@" a
  asm noret "imul @" b

proc mul a: s16 b: s16 -> s16
  asm "mov ax,@" a
  asm noret "imul @" b

proc mul a: s8 b: s8 -> s8
  asm "mov al,@" a
  asm noret "imul @" b

proc mul a: u64 b: u64 -> u64
  asm "mov rax,@" a
  asm noret "mul @" b

proc mul a: u32 b: u32 -> u32
  asm "mov eax,@" a
  asm noret "mul @" b

proc mul a: u16 b: u16 -> u16
  asm "mov ax,@" a
  asm noret "mul @" b

proc mul a: u8 b: u8 -> u8
  asm "mov al,@" a
  asm noret "mul @" b


proc div a: s64 b: s64 -> s64
  asm "mov rax,@" a
  asm "cqo"
  asm noret "idiv @" b

proc div a: s32 b: s32 -> s32
  asm "mov eax,@" a
  asm "cdq"
  asm noret "idiv @" b

proc div a: s16 b: s16 -> s16
  asm "mov ax,@" a
  asm "cwd"
  asm noret "idiv @" b

proc div a: s8 b: s8 -> s8
  asm "mov al,@" a
  asm "cbw"
  asm noret "idiv @" b

proc div a: u64 b: u64 -> u64
  asm "mov rax,@" a
  asm "cqo"
  asm noret "div @" b

proc div a: u32 b: u32 -> u32
  asm "mov eax,@" a
  asm "cdq"
  asm noret "div @" b

proc div a: u16 b: u16 -> u16
  asm "mov ax,@" a
  asm "cwd"
  asm noret "div @" b

proc div a: u8 b: u8 -> u8
  asm "mov al,@" a
  asm "cbw"
  asm noret "div @" b


proc mod a: s64 b: s64 -> s64
  asm "mov rax,@" a
  asm "cqo"
  asm "idiv @" b
  asm noret "mov rax,rdx"

proc mod a: s32 b: s32 -> s32
  asm "mov eax,@" a
  asm "cdq"
  asm "idiv @" b
  asm noret "mov eax,edx"

proc mod a: s16 b: s16 -> s16
  asm "mov ax,@" a
  asm "cwd"
  asm "idiv @" b
  asm noret "mov ax,dx"

proc mod a: s8 b: s8 -> s8
  asm "mov al,@" a
  asm "cbw"
  asm "idiv @" b
  asm noret "mov al,dl"

proc mod a: u64 b: u64 -> u64
  asm "mov rax,@" a
  asm "cqo"
  asm "idiv @" b
  asm noret "mov rax,rdx"

proc mod a: u32 b: u32 -> u32
  asm "mov eax,@" a
  asm "cdq"
  asm "idiv @" b
  asm noret "mov eax,edx"

proc mod a: u16 b: u16 -> u16
  asm "mov ax,@" a
  asm "cwd"
  asm "idiv @" b
  asm noret "mov ax,dx"

proc mod a: u8 b: u8 -> u8
  asm "mov al,@" a
  asm "cbw"
  asm "idiv @" b
  asm noret "mov al,dl"


proc neg num: s64 -> s64
  asm "neg @" num
  ret num

proc neg num: s32 -> s32
  asm "neg @" num
  ret num

proc neg num: s16 -> s16
  asm "neg @" num
  ret num

proc neg num: s8 -> s8
  asm "neg @" num
  ret num

proc neg num: u64 -> u64
  asm "neg @" num
  ret num

proc neg num: u32 -> u32
  asm "neg @" num
  ret num

proc neg num: u16 -> u16
  asm "neg @" num
  ret num

proc neg num: u8 -> u8
  asm "neg @" num
  ret num



proc or a: s64 b: s64 -> s64
  asm "or @,@" a b
  ret a

proc or a: s32 b: s32 -> s32
  asm "or @,@" a b
  ret a

proc or a: s16 b: s16 -> s16
  asm "or @,@" a b
  ret a

proc or a: s8 b: s8 -> s8
  asm "or @,@" a b
  ret a

proc or a: u64 b: u64 -> u64
  asm "or @,@" a b
  ret a

proc or a: u32 b: u32 -> u32
  asm "or @,@" a b
  ret a

proc or a: u16 b: u16 -> u16
  asm "or @,@" a b
  ret a

proc or a: u8 b: u8 -> u8
  asm "or @,@" a b
  ret a


proc and a: s64 b: s64 -> s64
  asm "and @,@" a b
  ret a

proc and a: s32 b: s32 -> s32
  asm "and @,@" a b
  ret a

proc and a: s16 b: s16 -> s16
  asm "and @,@" a b
  ret a

proc and a: s8 b: s8 -> s8
  asm "and @,@" a b
  ret a

proc and a: u64 b: u64 -> u64
  asm "and @,@" a b
  ret a

proc and a: u32 b: u32 -> u32
  asm "and @,@" a b
  ret a

proc and a: u16 b: u16 -> u16
  asm "and @,@" a b
  ret a

proc and a: u8 b: u8 -> u8
  asm "and @,@" a b
  ret a


proc xor a: s64 b: s64 -> s64
  asm "xor @,@" a b
  ret a

proc xor a: s32 b: s32 -> s32
  asm "xor @,@" a b
  ret a

proc xor a: s16 b: s16 -> s16
  asm "xor @,@" a b
  ret a

proc xor a: s8 b: s8 -> s8
  asm "xor @,@" a b
  ret a

proc xor a: u64 b: u64 -> u64
  asm "xor @,@" a b
  ret a

proc xor a: u32 b: u32 -> u32
  asm "xor @,@" a b
  ret a

proc xor a: u16 b: u16 -> u16
  asm "xor @,@" a b
  ret a

proc xor a: u8 b: u8 -> u8
  asm "xor @,@" a b
  ret a
